#!/bin/bash

#-------------------------------------------------------------------------------
# Script: Instalador Fluxer v2.0
# Descri√ß√£o: Realiza a configura√ß√£o completa de um ambiente de automa√ß√£o
#            com Portainer, n8n, Typebot, MinIO e Evolution API usando Docker.
# Autor: Seu Nome/Empresa
# Vers√£o: 2.0
#-------------------------------------------------------------------------------

# === VARI√ÅVEIS DE CORES E ESTILOS ===
VERDE='\033[1;32m'
AZUL='\033[1;34m'
AMARELO='\033[1;33m'
VERMELHO='\033[1;31m'
NEGRITO='\033[1m'
RESET='\033[0m'

# === FUN√á√ïES AUXILIARES PARA EXIBIR MENSAGENS ===
msg_header() {
    echo -e "\n${AZUL}${NEGRITO}# $1${RESET}"
}

msg_success() {
    echo -e "${VERDE}‚úî $1${RESET}"
}

msg_info() {
    echo -e "${AZUL}‚ûú $1${RESET}"
}

msg_warning() {
    echo -e "${AMARELO}‚ö†Ô∏è $1${RESET}"
}

msg_error() {
    echo -e "${VERMELHO}‚ùå ERRO: $1${RESET}"
}

# === FUN√á√ÉO PRINCIPAL DE INSTALA√á√ÉO ===
main() {
    clear
    # --- BANNER ---
    echo -e "${AZUL}${NEGRITO}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù "
    echo "‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     "
    echo "‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù    ‚ñà‚ñà     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     "
    echo -e "${RESET}"
    echo -e "${VERDE}${NEGRITO}üõ† INSTALADOR FLUXER - CONFIGURA√á√ÉO COMPLETA DA VPS${RESET}"

    # --- VERIFICA√á√ÉO DE DEPEND√äNCIAS ---
    msg_header "VERIFICANDO DEPEND√äNCIAS"
    if ! command -v docker &> /dev/null; then
        msg_error "Docker n√£o encontrado. Por favor, instale o Docker e tente novamente."
        exit 1
    fi
    if ! command -v docker-compose &> /dev/null; then
        msg_error "Docker Compose n√£o encontrado. Por favor, instale-o e tente novamente."
        exit 1
    fi
    if ! command -v openssl &> /dev/null; then
        msg_error "OpenSSL n√£o encontrado. Por favor, instale-o e tente novamente."
        exit 1
    fi
    msg_success "Todas as depend√™ncias foram encontradas."

    # --- INSTRU√á√ïES INICIAIS ---
    msg_header "CONFIGURA√á√ÉO DNS (WILDCARD)"
    msg_warning "Antes de continuar, configure um registro DNS WILDCARD na sua Cloudflare:"
    echo -e "${NEGRITO}  Tipo:   A"
    echo -e "  Nome:   *"
    echo -e "  IP:     (O IP desta VPS)"
    echo -e "  Proxy:  DNS only (nuvem cinza, desativado)${RESET}"
    echo
    read -p "Pressione [Enter] para continuar ap√≥s configurar o DNS..."

    # --- COLETA DE DADOS DO USU√ÅRIO ---
    msg_header "COLETANDO INFORMA√á√ïES"

    # Dom√≠nio Raiz
    while [[ -z "$DOMINIO_RAIZ" ]]; do
        read -p "üåê Qual √© o seu dom√≠nio principal (ex: seudominio.com.br): " DOMINIO_RAIZ
        if [[ -z "$DOMINIO_RAIZ" ]]; then
            msg_warning "O dom√≠nio n√£o pode ser vazio."
        fi
    done

    # Email para Let's Encrypt
    while [[ -z "$LE_EMAIL" ]]; do
        read -p "üìß Email para o certificado SSL (Let's Encrypt): " LE_EMAIL
        if [[ -z "$LE_EMAIL" ]]; then
            msg_warning "O email n√£o pode ser vazio."
        fi
    done

    # Credenciais do Portainer
    while true; do
        read -s -p "üîë Digite uma senha para o Portainer: " PORTAINER_PASSWORD
        echo
        read -s -p "üîë Confirme a senha do Portainer: " PORTAINER_PASSWORD_CONFIRM
        echo
        if [[ "$PORTAINER_PASSWORD" == "$PORTAINER_PASSWORD_CONFIRM" ]] && [[ -n "$PORTAINER_PASSWORD" ]]; then
            break
        else
            msg_warning "As senhas n√£o coincidem ou est√£o vazias. Tente novamente."
        fi
    done

    # Credenciais do MinIO
    while [[ -z "$MINIO_ROOT_USER" ]]; do
        read -p "üë§ Usu√°rio root para o MinIO: " MINIO_ROOT_USER
    done
    while true; do
        read -s -p "üîë Digite uma senha para o MinIO: " MINIO_ROOT_PASSWORD
        echo
        read -s -p "üîë Confirme a senha do MinIO: " MINIO_ROOT_PASSWORD_CONFIRM
        echo
        if [[ "$MINIO_ROOT_PASSWORD" == "$MINIO_ROOT_PASSWORD_CONFIRM" ]] && [[ -n "$MINIO_ROOT_PASSWORD" ]]; then
            break
        else
            msg_warning "As senhas n√£o coincidem ou est√£o vazias. Tente novamente."
        fi
    done

    # --- GERA√á√ÉO DE VARI√ÅVEIS E SUBDOM√çNIOS ---
    msg_header "GERANDO CONFIGURA√á√ïES"
    msg_info "Gerando subdom√≠nios e chaves de seguran√ßa..."

    # Subdom√≠nios
    PORTAINER_DOMAIN="portainer.${DOMINIO_RAIZ}"
    N8N_EDITOR_DOMAIN="n8n.${DOMINIO_RAIZ}"
    N8N_WEBHOOK_DOMAIN="nwn.${DOMINIO_RAIZ}"
    TYPEBOT_EDITOR_DOMAIN="tpb.${DOMINIO_RAIZ}"
    TYPEBOT_VIEWER_DOMAIN="tpv.${DOMINIO_RAIZ}"
    MINIO_CONSOLE_DOMAIN="minio.${DOMINIO_RAIZ}"
    MINIO_S3_DOMAIN="s3.${DOMINIO_RAIZ}"
    EVOLUTION_DOMAIN="evo.${DOMINIO_RAIZ}"

    # Chaves e Senhas Aleat√≥rias
    POSTGRES_PASSWORD=$(openssl rand -hex 16)
    N8N_ENCRYPTION_KEY=$(openssl rand -hex 16)
    TYPEBOT_ENCRYPTION_KEY=$(openssl rand -hex 16)
    EVOLUTION_API_KEY=$(openssl rand -hex 16)
    
    msg_success "Configura√ß√µes geradas."

    # --- CRIA√á√ÉO DO ARQUIVO .ENV ---
    msg_info "Criando o arquivo de configura√ß√£o .env..."
    # Usando cat com HEREDOC para criar o arquivo .env de uma s√≥ vez
    cat > .env <<EOF
# Gerado por Fluxer Installer v2.0 em $(date)

# --- GERAL ---
REDE_DOCKER=fluxerNet
LE_EMAIL=${LE_EMAIL}

# --- PORTAINER ---
PORTAINER_DOMAIN=${PORTAINER_DOMAIN}
PORTAINER_PASSWORD=${PORTAINER_PASSWORD}
PORTAINER_VOLUME=portainer_data

# --- BANCO DE DADOS (PostgreSQL) ---
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_VOLUME=postgres_data

# --- CACHE (Redis) ---
REDIS_VOLUME=redis_data
REDIS_URI=redis://redis:6379/8

# --- ARMAZENAMENTO (MinIO) ---
MINIO_CONSOLE_DOMAIN=${MINIO_CONSOLE_DOMAIN}
MINIO_S3_DOMAIN=${MINIO_S3_DOMAIN}
MINIO_ROOT_USER=${MINIO_ROOT_USER}
MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
MINIO_VOLUME=minio_data

# --- N8N ---
N8N_EDITOR_DOMAIN=${N8N_EDITOR_DOMAIN}
N8N_WEBHOOK_DOMAIN=${N8N_WEBHOOK_DOMAIN}
N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
# Configure suas credenciais SMTP se necess√°rio
N8N_SMTP_USER=
N8N_SMTP_PASS=
N8N_SMTP_HOST=
N8N_SMTP_PORT=587
N8N_SMTP_SSL=false

# --- TYPEBOT ---
TYPEBOT_EDITOR_DOMAIN=${TYPEBOT_EDITOR_DOMAIN}
TYPEBOT_VIEWER_DOMAIN=${TYPEBOT_VIEWER_DOMAIN}
TYPEBOT_ENCRYPTION_KEY=${TYPEBOT_ENCRYPTION_KEY}

# --- EVOLUTION API ---
EVOLUTION_DOMAIN=${EVOLUTION_DOMAIN}
EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
EVOLUTION_VOLUME=evolution_instances
EOF
    msg_success "Arquivo .env criado com sucesso!"

    # --- INICIANDO OS SERVI√áOS ---
    msg_header "INICIANDO OS SERVI√áOS"
    if [ ! -f "docker-compose.yml" ]; then
        msg_error "Arquivo 'docker-compose.yml' n√£o encontrado no diret√≥rio atual. O script n√£o pode continuar."
        exit 1
    fi
    
    msg_info "Criando a rede Docker..."
    docker network create fluxerNet &> /dev/null
    
    msg_info "Iniciando os cont√™ineres com 'docker-compose up -d'..."
    msg_warning "Este processo pode levar v√°rios minutos, dependendo da sua conex√£o e VPS."
    if docker-compose up -d; then
        msg_success "Todos os servi√ßos foram iniciados com sucesso!"
    else
        msg_error "Houve um problema ao iniciar os servi√ßos com o Docker Compose."
        msg_warning "Verifique as mensagens de erro acima e o arquivo 'docker-compose.yml'."
        exit 1
    fi

    # --- RESUMO FINAL ---
    msg_header "üéâ INSTALA√á√ÉO CONCLU√çDA üéâ"
    echo -e "${VERDE}Aguarde alguns minutos para que todos os servi√ßos e certificados SSL sejam configurados."
    echo -e "Abaixo est√£o os seus links de acesso:${RESET}"
    echo
    echo -e "${NEGRITO}Painel Portainer:   https://${PORTAINER_DOMAIN}${RESET}"
    echo -e "${NEGRITO}Painel n8n (editor):  https://${N8N_EDITOR_DOMAIN}${RESET}"
    echo -e "${NEGRITO}Webhook n8n:          https://${N8N_WEBHOOK_DOMAIN}${RESET}"
    echo -e "${NEGRITO}Builder Typebot:      https://${TYPEBOT_EDITOR_DOMAIN}${RESET}"
    echo -e "${NEGRITO}Viewer Typebot:       https://${TYPEBOT_VIEWER_DOMAIN}${RESET}"
    echo -e "${NEGRITO}MinIO Painel:         https://${MINIO_CONSOLE_DOMAIN}${RESET}"
    echo -e "${NEGRITO}MinIO S3 Endpoint:    ${MINIO_S3_DOMAIN}${RESET}"
    echo -e "${NEGRITO}Evolution API:        https://${EVOLUTION_DOMAIN}${RESET}"
    echo

    read -p "Voc√™ deseja exibir as senhas e chaves geradas agora? (s/N): " SHOW_CREDS
    if [[ "$SHOW_CREDS" =~ ^[Ss]$ ]]; then
        echo
        msg_header "CREDENCIAS GERADAS"
        echo -e "${AMARELO}Anote estas informa√ß√µes e guarde-as em um local seguro.${RESET}"
        echo -e "${NEGRITO}Senha do Portainer:      ${PORTAINER_PASSWORD}${RESET}"
        echo -e "${NEGRITO}Usu√°rio root do MinIO:   ${MINIO_ROOT_USER}${RESET}"
        echo -e "${NEGRITO}Senha root do MinIO:     ${MINIO_ROOT_PASSWORD}${RESET}"
        echo -e "${NEGRITO}Chave da Evolution API:  ${EVOLUTION_API_KEY}${RESET}"
    fi
    echo
    msg_success "Tudo pronto! Aproveite seu novo ambiente de automa√ß√£o."
}

# --- PONTO DE ENTRADA DO SCRIPT ---
main
