#!/bin/bash

#-------------------------------------------------------------------------------
# Script: Instalador Mestre Fluxer
# Descri√ß√£o: Prepara uma VPS Ubuntu nova, instalando todas as depend√™ncias
#            necess√°rias (Git, Docker, Docker Compose) e, em seguida,
#            executa o script de configura√ß√£o do ambiente Fluxer.
# Autor: Humberley / [Seu Nome]
# Vers√£o: 3.0
#-------------------------------------------------------------------------------

# === VARI√ÅVEIS GLOBAIS ===
# Cores para uma sa√≠da mais leg√≠vel
VERDE='\033[1;32m'
AZUL='\033[1;34m'
AMARELO='\033[1;33m'
VERMELHO='\033[1;31m'
NEGRITO='\033[1m'
RESET='\033[0m'

# Diret√≥rio de instala√ß√£o para os arquivos de configura√ß√£o
INSTALL_DIR="/opt/setup-fluxer"
REPO_URL="https://github.com/Humberley/setup-fluxer.git"
INSTALL_SCRIPT_NAME="fluxer-install.sh"


# === FUN√á√ïES AUXILIARES ===

# Exibe uma mensagem de cabe√ßalho
msg_header() {
    echo -e "\n${AZUL}${NEGRITO}#-----------------------------------------------------#"
    echo -e "# ${1}"
    echo -e "#-----------------------------------------------------#${RESET}"
}

# Exibe uma mensagem de sucesso
msg_success() {
    echo -e "${VERDE}‚úî $1${RESET}"
}

# Exibe uma mensagem de aviso
msg_warning() {
    echo -e "${AMARELO}‚ö†Ô∏è $1${RESET}"
}

# Exibe uma mensagem de erro e encerra o script
msg_error() {
    echo -e "\n${VERMELHO}‚ùå ERRO: $1${RESET}\n"
    exit 1
}

# Verifica se um comando existe
command_exists() {
    command -v "$1" &> /dev/null
}


# === FUN√á√ïES DE INSTALA√á√ÉO ===

# 1. Verifica permiss√µes e atualiza o sistema
prepare_system() {
    msg_header "Preparando o Sistema (Ubuntu)"

    # Verifica se o script est√° sendo executado como root
    if [ "$(id -u)" -ne 0 ]; then
        msg_error "Este script precisa ser executado como root. Use: curl ... | sudo bash"
    fi
    msg_success "Executando com permiss√µes de root."

    # Atualiza os pacotes do sistema
    echo "Atualizando a lista de pacotes..."
    if ! apt-get update -qq; then
        msg_error "Falha ao atualizar a lista de pacotes (apt-get update)."
    fi
    
    echo "Instalando atualiza√ß√µes do sistema..."
    # O DEBIAN_FRONTEND evita di√°logos interativos durante a atualiza√ß√£o
    if ! DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -qq; then
        msg_warning "Ocorreu um problema durante o 'apt-get upgrade'."
    fi

    echo "Instalando depend√™ncias essenciais (curl, git)..."
    if ! DEBIAN_FRONTEND=noninteractive apt-get install -y curl git -qq; then
        msg_error "Falha ao instalar pacotes essenciais (curl, git)."
    fi

    msg_success "Sistema preparado e atualizado."
}

# 2. Instala o Docker Engine
install_docker() {
    msg_header "Instalando o Docker Engine"
    if command_exists docker; then
        msg_success "Docker j√° est√° instalado."
        return
    fi

    msg_warning "Docker n√£o encontrado. Instalando agora..."
    if ! curl -fsSL https://get.docker.com -o get-docker.sh; then
        msg_error "Falha ao baixar o script de instala√ß√£o do Docker."
    fi
    
    if ! sh get-docker.sh; then
        msg_error "O script de instala√ß√£o do Docker falhou."
    fi
    
    rm get-docker.sh
    msg_success "Docker Engine instalado com sucesso."
}

# 3. Instala o Docker Compose
install_docker_compose() {
    msg_header "Instalando o Docker Compose"
    if command_exists docker-compose; then
        msg_success "Docker Compose j√° est√° instalado."
        return
    fi
    
    msg_warning "Docker Compose n√£o encontrado. Instalando agora..."
    
    # Encontra a √∫ltima vers√£o do Docker Compose
    LATEST_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
    if [ -z "$LATEST_COMPOSE_VERSION" ]; then
        msg_error "N√£o foi poss√≠vel obter a √∫ltima vers√£o do Docker Compose da API do GitHub."
    fi
    
    DESTINATION="/usr/local/bin/docker-compose"
    
    # Baixa o bin√°rio
    if ! curl -L "https://github.com/docker/compose/releases/download/${LATEST_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o "${DESTINATION}"; then
        msg_error "Falha ao baixar o bin√°rio do Docker Compose."
    fi
    
    # Torna o bin√°rio execut√°vel
    if ! chmod +x "${DESTINATION}"; then
        msg_error "Falha ao tornar o Docker Compose execut√°vel."
    fi
    
    msg_success "Docker Compose ${LATEST_COMPOSE_VERSION} instalado com sucesso."
}

# 4. Clona ou atualiza o reposit√≥rio de configura√ß√£o
setup_repository() {
    msg_header "Configurando o Reposit√≥rio de Instala√ß√£o"
    
    if [ -d "$INSTALL_DIR" ]; then
        msg_warning "Diret√≥rio ${INSTALL_DIR} j√° existe. Atualizando..."
        cd "$INSTALL_DIR" || msg_error "N√£o foi poss√≠vel acessar o diret√≥rio ${INSTALL_DIR}"
        
        # Garante que n√£o haja conflitos locais que impe√ßam o pull
        git reset --hard HEAD >/dev/null 2>&1
        
        if ! git pull; then
            msg_error "Falha ao atualizar o reposit√≥rio com 'git pull'."
        fi
        msg_success "Reposit√≥rio atualizado."
    else
        echo "Clonando reposit√≥rio de ${REPO_URL}..."
        if ! git clone "${REPO_URL}" "${INSTALL_DIR}"; then
            msg_error "Falha ao clonar o reposit√≥rio."
        fi
        msg_success "Reposit√≥rio clonado com sucesso para ${INSTALL_DIR}."
    fi
}


# === FUN√á√ÉO PRINCIPAL (MAIN) ===
main() {
    clear
    echo -e "${AZUL}${NEGRITO}üöÄ Iniciando o Instalador Mestre Fluxer v3.0...${RESET}"
    
    prepare_system
    install_docker
    install_docker_compose
    setup_repository
    
    # Navega para o diret√≥rio de instala√ß√£o
    cd "$INSTALL_DIR" || msg_error "Diret√≥rio de instala√ß√£o ${INSTALL_DIR} n√£o encontrado ap√≥s a configura√ß√£o."
    
    # Verifica se o script de instala√ß√£o principal existe
    if [ ! -f "$INSTALL_SCRIPT_NAME" ]; then
        msg_error "O script de instala√ß√£o '${INSTALL_SCRIPT_NAME}' n√£o foi encontrado no reposit√≥rio."
    fi
    
    msg_header "Entregando para o Instalador do Ambiente Fluxer"
    echo "O ambiente est√° pronto. O script principal ser√° executado agora."
    echo "A partir deste ponto, o instalador far√° perguntas sobre dom√≠nios e senhas."
    sleep 3
    
    # Torna o script principal execut√°vel e o executa
    chmod +x "$INSTALL_SCRIPT_NAME"
    ./"$INSTALL_SCRIPT_NAME"
}

# --- PONTO DE ENTRADA DO SCRIPT ---
# Chama a fun√ß√£o principal para iniciar todo o processo.
main
